// -- FUNCTIONS

function GetDatabaseValueArray(
    )
{
    var statement = GetDatabaseStatement( 'select `Tuid`, `Uuid`, `Name`, `Integer`, `Text` from `VALUE`' );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var value_array = [];

    while ( var value = statement.fetchObject() )
    {
        value.Integer = ( int )( value.Integer );
        array_push( value_array, value );
    }

    return value_array;
}

// ~~

function GetDatabaseValueByTuid(
    string tuid
    )
{
    var statement = GetDatabaseStatement( 'select `Tuid`, `Uuid`, `Name`, `Integer`, `Text` from `VALUE` where `Tuid` = ? limit 1' );
    statement.bindParam( 1, tuid, PDO::PARAM_STR );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var value = statement.fetchObject();
    value.Integer = ( int )( value.Integer );

    return value;
}

// ~~

function AddDatabaseValue(
    string tuid,
    string uuid,
    string name,
    int integer,
    string text
    )
{
    var statement = GetDatabaseStatement( 'insert into `VALUE` ( `Tuid`, `Uuid`, `Name`, `Integer`, `Text` ) values ( ?, ?, ?, ?, ? )' );
    statement.bindParam( 1, tuid, PDO::PARAM_STR );
    statement.bindParam( 2, uuid, PDO::PARAM_STR );
    statement.bindParam( 3, name, PDO::PARAM_STR );
    statement.bindParam( 4, integer, PDO::PARAM_INT );
    statement.bindParam( 5, text, PDO::PARAM_STR );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    return GetDatabaseAddedId( statement );
}

// ~~

function PutDatabaseValue(
    string tuid,
    string uuid,
    string name,
    int integer,
    string text
    )
{
    var statement = GetDatabaseStatement( 'replace into `VALUE` ( `Tuid`, `Uuid`, `Name`, `Integer`, `Text` ) values ( ?, ?, ?, ?, ? )' );
    statement.bindParam( 1, tuid, PDO::PARAM_STR );
    statement.bindParam( 2, uuid, PDO::PARAM_STR );
    statement.bindParam( 3, name, PDO::PARAM_STR );
    statement.bindParam( 4, integer, PDO::PARAM_INT );
    statement.bindParam( 5, text, PDO::PARAM_STR );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    return GetDatabaseAddedId( statement );
}

// ~~

function SetDatabaseValue(
    string tuid,
    string uuid,
    string name,
    int integer,
    string text
    )
{
    var statement = GetDatabaseStatement( 'update `VALUE` set `Uuid` = ?, `Name` = ?, `Integer` = ?, `Text` = ? where Tuid = ?' );
    statement.bindParam( 1, uuid, PDO::PARAM_STR );
    statement.bindParam( 2, name, PDO::PARAM_STR );
    statement.bindParam( 3, integer, PDO::PARAM_INT );
    statement.bindParam( 4, text, PDO::PARAM_STR );
    statement.bindParam( 5, tuid, PDO::PARAM_STR );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }
}

// ~~

function RemoveDatabaseValueByTuid(
    string tuid
    )
{
    var statement = GetDatabaseStatement( 'delete from `VALUE` where `Tuid` = ?' );
    statement.bindParam( 1, tuid, PDO::PARAM_STR );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }
}
